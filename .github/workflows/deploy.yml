name: Deploy ZBV to Lightsail

# Trigger on push to dev or main
on:
  push:
    branches:
      - dev
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ────────────────────────────────────────────────────
      # 1) Checkout code
      # ────────────────────────────────────────────────────
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ────────────────────────────────────────────────────
      # 2) Determine environment: dev vs prod
      # ────────────────────────────────────────────────────
      - name: Set environment variables
        id: env-vars
        run: |
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_OUTPUT
            echo "TARGET_DIR=/var/www/zbv-dev" >> $GITHUB_OUTPUT
          else
            echo "ENV=prod" >> $GITHUB_OUTPUT
            echo "TARGET_DIR=/var/www/zbv-prod" >> $GITHUB_OUTPUT
          fi

      # ───────────────────────────────────────────────────────────────────────
      # 3) Create a build-time .env for Vite
      #
      #    We write only the VITE_ variables here so that Vite can pick them up
      #    when running `npm run build`.
      # ───────────────────────────────────────────────────────────────────────
      - name: Create build-time .env
        run: |
          # Remove any existing .env to avoid merge/conflict
          rm -f .env

          if [[ "${{ steps.env-vars.outputs.ENV }}" == "dev" ]]; then
            # Write VITE_ vars for the dev build
            echo "VITE_ADMIN_TOKEN=${{ secrets.VITE_ADMIN_TOKEN_DEV }}" >> .env
            echo "VITE_STRIPE_PUBLIC_KEY=${{ secrets.VITE_STRIPE_PUBLIC_KEY_DEV }}" >> .env
          else
            # Write VITE_ vars for the prod build
            echo "VITE_ADMIN_TOKEN=${{ secrets.VITE_ADMIN_TOKEN_PROD }}" >> .env
            echo "VITE_STRIPE_PUBLIC_KEY=${{ secrets.VITE_STRIPE_PUBLIC_KEY_PROD }}" >> .env
          fi

      # ────────────────────────────────────────────────────
      # 4) Set up PHP 8.4 and Composer
      # ────────────────────────────────────────────────────
      - name: Setup PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, pgsql, xml, bcmath, zip

      # ────────────────────────────────────────────────────
      # 5) Install Composer dependencies
      # ────────────────────────────────────────────────────
      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader --no-interaction

      # ────────────────────────────────────────────────────
      # 6) Set up Node.js 20 & build front-end assets
      # ────────────────────────────────────────────────────
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install NPM packages
        run: npm ci

      - name: Build front-end assets
        run: npm run build

      # ────────────────────────────────────────────────────
      # 7) Fix file permissions
      # ────────────────────────────────────────────────────
      - name: Set storage permissions
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            # ensure the "deploy" user owns and can write to storage/*
            sudo touch storage/logs/laravel.log
            sudo chown -R deploy:www-data ${{ steps.env-vars.outputs.TARGET_DIR }}/storage
            sudo chmod -R ug+rwx ${{ steps.env-vars.outputs.TARGET_DIR }}/storage

      # ────────────────────────────────────────────────────
      # 8) Sync code to Lightsail via rsync over SSH
      # ────────────────────────────────────────────────────
      - name: Sync to Lightsail via rsync
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avzr --delete --exclude='.git/' --exclude='node_modules/' --exclude='vendor/' --exclude='storage/app/public/*' --exclude='storage/media-library/temp/*'
          path: '.'
          remote_host: ${{ secrets.LIGHTSAIL_HOST }}
          remote_user: ${{ secrets.LIGHTSAIL_USER }}
          remote_key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          remote_path: ${{ steps.env-vars.outputs.TARGET_DIR }}

      # ────────────────────────────────────────────────────
      # 9) SSH in and build the real .env from secrets, then migrate/cache
      # ────────────────────────────────────────────────────
      - name: Build .env and deploy on server
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            cd ${{ steps.env-vars.outputs.TARGET_DIR }}

            if [ "${{ steps.env-vars.outputs.ENV }}" = "dev" ]; then
              # ────────────────────────────────────────────────────
              # 7A) Dev environment: write /var/www/zbv-dev/.env
              # ────────────────────────────────────────────────────
              echo 'APP_NAME="ZBV (Dev)"'         >  .env
              echo 'APP_ENV=dev'                  >> .env
              echo 'APP_KEY='                     >> .env
              echo 'APP_DEBUG=true'               >> .env
              echo 'APP_URL=http://dev.zbvinvitational.com' >> .env
              echo ''                             >> .env

              echo 'LOG_CHANNEL=stack'            >> .env
              echo ''                             >> .env

              echo 'DB_CONNECTION=pgsql'          >> .env
              echo 'DB_HOST=127.0.0.1'             >> .env
              echo 'DB_PORT=5432'                 >> .env
              echo "DB_DATABASE=${{ secrets.DB_DEV_NAME }}"     >> .env
              echo "DB_USERNAME=${{ secrets.DB_DEV_USER }}"     >> .env
              echo "DB_PASSWORD=${{ secrets.DB_DEV_PASSWORD }}" >> .env
              echo ''                             >> .env

              echo "MEDIA_DISK=${{ secrets.MEDIA_DISK_DEV }}"  >> .env
              echo ''                             >> .env

              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"  >> .env
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"  >> .env
              echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION_DEV }}"  >> .env
              echo "AWS_BUCKET=${{ secrets.AWS_BUCKET_DEV }}"  >> .env

              echo ''                             >> .env
              echo "MAIL_MAILER=${{ secrets.MAIL_MAILER_DEV }}"  >> .env
              echo "MAIL_HOST=${{ secrets.MAIL_HOST_DEV }}"   >> .env
              echo 'MAIL_PORT=587'                >> .env
              echo "MAIL_USERNAME=${{ secrets.MAILGUN_USERNAME_DEV }}"   >> .env
              echo "MAIL_PASSWORD=${{ secrets.MAILGUN_PASSWORD_DEV }}"   >> .env
              echo 'MAIL_ENCRYPTION=tls'          >> .env
              echo "MAIL_FROM_ADDRESS=\"${{ secrets.MAIL_FROM_DEV }}\""  >> .env
              echo "MAIL_FROM_NAME=\"${{ secrets.MAIL_FROM_NAME_DEV }}\"" >> .env
              echo "MAIL_TO_ADDRESS=${{ secrets.MAIL_TO_ADDRESS_DEV }}"   >> .env
              echo "MAIL_TO_NAME=\"${{ secrets.MAIL_TO_NAME_DEV }}\""     >> .env
              echo ''                             >> .env

              echo "STRIPE_SECRET=${{ secrets.STRIPE_SECRET_DEV }}"                     >> .env
              echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET_DEV }}"     >> .env

              sudo chown -R deploy:www-data storage bootstrap/cache
              sudo find storage -type d -exec chmod 775 {} \;
              sudo find storage -type f -exec chmod 664 {} \;

              sudo find bootstrap/cache -type d -exec chmod 775 {} \;
              sudo find bootstrap/cache -type f -exec chmod 664 {} \;

              sudo touch storage/logs/laravel.log
              sudo chown deploy:www-data storage/logs/laravel.log
              sudo chmod 664 storage/logs/laravel.log

              composer install --no-dev --optimize-autoloader --no-interaction
              php artisan migrate
              php artisan key:generate
              php artisan storage:link
            else
              # ────────────────────────────────────────────────────
              # 7B) Production environment: write /var/www/zbv-prod/.env
              # ────────────────────────────────────────────────────
              echo 'APP_NAME="ZBV"'              >  .env
              echo 'APP_ENV=production'         >> .env
              echo 'APP_KEY='                    >> .env
              echo 'APP_DEBUG=false'             >> .env
              echo 'APP_URL=https://zbvinvitational.com' >> .env
              echo ''                             >> .env

              echo 'LOG_CHANNEL=stack'           >> .env
              echo ''                             >> .env

              echo 'DB_CONNECTION=pgsql'         >> .env
              echo 'DB_HOST=127.0.0.1'            >> .env
              echo 'DB_PORT=5432'                >> .env
              echo "DB_DATABASE=${{ secrets.DB_PROD_NAME }}"   >> .env
              echo "DB_USERNAME=${{ secrets.DB_PROD_USER }}"   >> .env
              echo "DB_PASSWORD=${{ secrets.DB_PROD_PASSWORD }}" >> .env
              echo ''                             >> .env

              echo "MEDIA_DISK=${{ secrets.MEDIA_DISK_PROD }}"  >> .env

              echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"  >> .env
              echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"  >> .env
              echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION_PROD }}"  >> .env
              echo "AWS_BUCKET=${{ secrets.AWS_BUCKET_PROD }}"  >> .env

              echo "MAIL_MAILER=${{ secrets.MAIL_MAILER_PROD }}"  >> .env
              echo "MAIL_HOST=${{ secrets.MAIL_HOST_PROD }}"   >> .env
              echo 'MAIL_PORT=587'               >> .env
              echo "MAIL_USERNAME=${{ secrets.MAILGUN_USERNAME_PROD }}" >> .env
              echo "MAIL_PASSWORD=${{ secrets.MAILGUN_PASSWORD_PROD }}" >> .env
              echo 'MAIL_ENCRYPTION=tls'         >> .env
              echo "MAIL_FROM_ADDRESS=\"${{ secrets.MAIL_FROM_PROD }}\"" >> .env
              echo "MAIL_FROM_NAME=\"${{ secrets.MAIL_FROM_NAME_PROD }}\"" >> .env
              echo "MAIL_TO_ADDRESS=${{ secrets.MAIL_TO_ADDRESS_PROD }}"   >> .env
              echo "MAIL_TO_NAME=\"${{ secrets.MAIL_TO_NAME_PROD }}\""     >> .env
              echo ''                             >> .env

              echo "STRIPE_SECRET=${{ secrets.STRIPE_SECRET_PROD }}"                     >> .env
              echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}"     >> .env

              composer install --no-dev --optimize-autoloader --no-interaction
              php artisan key:generate --force
              php artisan migrate --env=production --force
              php artisan storage:link
              php artisan config:cache
              php artisan route:cache
              php artisan view:cache
            fi
